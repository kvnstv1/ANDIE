package cosc202.andie;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.awt.image.BufferedImage;

/**
 * Represents a set of actions for a toolbar.
 *
 * Some codes are generated by GPT4.0.
 *
 * @author GreatestEden
 * @version 1.0
 */
public class TooIbarActions {

    private JToolBar toolbar;

    private JButton saveButton;
    private JButton exportButton;
    private JButton printButton;
    private JButton undoButton;
    private JButton redoButton;
    private JButton selectButton;
    private JButton cropButton;
    private JButton zoomInButton;
    private JButton zoomOutButton;
    private JButton openButton;

    /**
     * Initializes the TooIbarActions object and sets up the toolbar.
     */
    public TooIbarActions() {
        toolbar = new JToolBar("Toolbar", JToolBar.HORIZONTAL);

        // Create buttons
        openButton = new JButton(
                resizeAndAdjustIcon("src/cosc202/andie/icon/open-file stockes_02.png", 20, 20));
        saveButton = new JButton(
                resizeAndAdjustIcon("src/cosc202/andie/icon/diskette Yogi Aprelliyanto.png", 20, 20));
        exportButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/export Freepik.png", 20, 20));
        printButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/printer Freepik.png", 20, 20));

        undoButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/undo-arrow Dave Gandy.png", 20, 20));
        redoButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/redo-arrow Dave Gandy.png", 20, 20));

        selectButton = new JButton(
                resizeAndAdjustIcon("src/cosc202/andie/icon/selection-box Saepul Nahwan.png", 20, 20));
        cropButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/crop google.png", 20, 20));

        zoomInButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/zoom zafdesign.png", 20, 20));
        zoomOutButton = new JButton(resizeAndAdjustIcon("src/cosc202/andie/icon/zoom-out zafdesign.png", 20, 20));

        openButton.setToolTipText("Open");
        saveButton.setToolTipText("Save");
        exportButton.setToolTipText("Export");
        printButton.setToolTipText("Print");

        undoButton.setToolTipText("Undo");
        redoButton.setToolTipText("Redo");

        selectButton.setToolTipText("Select");
        cropButton.setToolTipText("Crop");

        zoomInButton.setToolTipText("Zoom In");
        zoomOutButton.setToolTipText("Zoom Out");

        openButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ee) {
                // Implement crop functionality here
                // System.out.println("hola");
                try {
                    Andie.fileActions.fileOpen.actionPerformed(ee);
                } catch (Exception ex) {
                    System.out.println(ex.toString());
                }
            }
        });

        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                Andie.fileActions.fileSave.actionPerformed(e);
            }
        });

        exportButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                Andie.fileActions.fileExport.actionPerformed(e);
            }
        });

        printButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                Andie.fileActions.filePrint.actionPerformed(e);
            }
        });

        // Add action listeners to buttons

        undoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                Andie.editActions.undo.actionPerformed(e);
            }
        });

        redoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                Andie.editActions.redo.actionPerformed(e);
            }
        });

        cropButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                try{
                    Andie.imageMenuBar.crop.actionPerformed(e);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.toString(),
                    Andie.bundle.getString("Error"), JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        zoomInButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                try {
                    Andie.viewActions.zoomIn.actionPerformed(e);
                } catch (Exception ex) {
                    System.out.println(ex.toString());
                }
            }
        });

        zoomOutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Implement crop functionality here
                Andie.viewActions.zoomOut.actionPerformed(e);
            }
        });

        // selectButton.addActionListener(new ActionListener() {
        // @Override
        // public void actionPerformed(ActionEvent e) {

        // // Implement select functionality here
        // }
        // });

        // Add buttons to toolbar
        toolbar.add(openButton);
        toolbar.add(saveButton);
        toolbar.add(exportButton);
        toolbar.add(printButton);
        toolbar.addSeparator();

        toolbar.add(undoButton);
        toolbar.add(redoButton);
        toolbar.addSeparator();

        // toolbar.add(selectButton);
        toolbar.add(cropButton);
        toolbar.addSeparator();

        toolbar.add(zoomInButton);
        toolbar.add(zoomOutButton);
    }
    /**A method to change the toolbar status
     * @param status the status of the toolbar
     */
    public void changeCertainToolbarStatus(boolean status) {
        saveButton.setEnabled(status);
        exportButton.setEnabled(status);
        printButton.setEnabled(status);
        undoButton.setEnabled(status);
        redoButton.setEnabled(status);
        selectButton.setEnabled(status);
        cropButton.setEnabled(status);
        zoomInButton.setEnabled(status);
        zoomOutButton.setEnabled(status);
    }
    /**A method to change the status of the crop
     * @param status the boolean impacting the status of the crop
     */
    public void changeCropStatus(boolean status){
        cropButton.setEnabled(status);
    }

    /**
     * Resizes and adjusts the icon to the specified width and height.
     *
     * @param iconPath The path to the icon image file.
     * @param width    The desired width of the icon.
     * @param height   The desired height of the icon.
     * @return An ImageIcon object representing the resized and adjusted icon.
     */
    private static ImageIcon resizeAndAdjustIcon(String iconPath, int width, int height) {
        try {
            BufferedImage originalImage = ImageIO.read(new File(iconPath));
            Image scaledImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Creates and returns the toolbar.
     *
     * @return The JToolBar object representing the toolbar.
     */
    public JToolBar createToolBar() {
        return toolbar;
    }

}// End of Class
