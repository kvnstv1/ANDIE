package cosc202.andie;

import javax.swing.*;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Stream;

import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatDarculaLaf;

/**
 * This class handles the configuration of themes for the application.
 *
 * Some codes are generated by GPT4.0.
 *
 * @author GreatestEden
 * @version 1.0
 */
public class ThemeConfig {

    /**
     * Creates a LookAndFeel object based on the configured theme settings.
     *
     * @return LookAndFeel object representing the selected theme.
     */
    public static LookAndFeel CreateTheme() {
        try {
            String followSysTheme = getConfigLine(1);
            if (followSysTheme.compareTo("1") == 0) {

                if (whatsTheOSTheme() == 0) {
                    // light theme
                    return new FlatLightLaf();
                } else {
                    // dark theme
                    return new FlatDarkLaf();
                }

            } else {
                String customTheme = getConfigLine(3);
                if (customTheme.compareTo("FlatLightLaf") == 0) {
                    FlatLightLaf.setup();
                    return new FlatLightLaf();
                } else if (customTheme.compareTo("FlatMacDarkLaf") == 0) {
                    FlatMacDarkLaf.setup();
                    return new FlatMacDarkLaf();
                } else if (customTheme.compareTo("FlatMacLightLaf") == 0) {
                    FlatMacLightLaf.setup();
                    return new FlatMacLightLaf();
                } else if (customTheme.compareTo("FlatDarkLaf") == 0) {
                    FlatDarkLaf.setup();
                    return new FlatDarkLaf();
                } else if (customTheme.compareTo("FlatIntelliJLaf") == 0) {
                    FlatIntelliJLaf.setup();
                    return new FlatIntelliJLaf();
                } else if (customTheme.compareTo("FlatDarculaLaf") == 0) {
                    FlatDarculaLaf.setup();
                    return new FlatDarculaLaf();
                } else {
                    return new FlatLightLaf();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        return new FlatLightLaf();
    }

    /**
     * Sets the application theme based on user preference.
     *
     * @param isFollowSysTheme true if the system theme should be followed, false
     *                         otherwise.
     * @param theme            the name of the custom theme to be set.
     */
    public static void SetTheme(boolean isFollowSysTheme, String theme) {
        if (isFollowSysTheme) {
            setConfigLine(1, "1");
        } else {
            setConfigLine(1, "0");
            setConfigLine(3, theme);
        }

    }

    /**
     * Determines the current operating system theme.
     *
     * @return 0 if the theme is light, 1 if the theme is dark.
     */
    public static int whatsTheOSTheme() {
        try {
            ProcessBuilder processBuilder;

            if (Andie.whatsTheOS() == 1) {
                // Command for Windows
                processBuilder = new ProcessBuilder("powershell", "-Command",
                        "Get-ItemProperty -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize | Select-Object AppsUseLightTheme");
            } else if (Andie.whatsTheOS() == 2) {
                // Command for MacOS
                processBuilder = new ProcessBuilder("/bin/bash", "-c", "defaults read -g AppleInterfaceStyle");
            } else {
                return 0;
            }

            Process process = processBuilder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            int theme = 0; // Default to light theme

            while ((line = reader.readLine()) != null) {
                if (Andie.whatsTheOS() == 1) {
                    theme = line.contains("0") ? 1 : 0; // 0 for dark theme in Windows
                } else if (Andie.whatsTheOS() == 2) {
                    theme = line.contains("Dark") ? 1 : 0; // Dark for dark theme in MacOS
                }
            }

            System.out.println("Current theme: " + (theme == 1 ? "Dark" : "Light"));
            return theme;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * Retrieves a line from the configuration file.
     *
     * @param index the index of the line to retrieve.
     * @return the content of the specified line in the configuration file.
     */
    public static String getConfigLine(int index) {
        try {
            return Files.readAllLines(Paths.get("src/cosc202/andie/Config.config")).get(index);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Sets a line in the configuration file.
     *
     * @param index the index of the line to set.
     * @param line  the content to set in the specified line.
     */
    public static void setConfigLine(int index, String line) {
        try {
            List<String> lines = Files.readAllLines(Paths.get("src/cosc202/andie/Config.config"));
            lines.set(index, line);
            Files.write(Paths.get("src/cosc202/andie/Config.config"), lines);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
